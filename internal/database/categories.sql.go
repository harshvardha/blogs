// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
insert into categories (id, category_name, created_at, updated_at)
values (
    gen_random_uuid(),
    $1,
    NOW(),
    NOW()
)
returning id, category_name, created_at, updated_at
`

func (q *Queries) CreateCategory(ctx context.Context, categoryName string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, categoryName)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CategoryName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :one
delete from categories where id = $1
returning id, category_name, created_at, updated_at
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRowContext(ctx, deleteCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CategoryName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const editCategory = `-- name: EditCategory :one
update categories set category_name = $1, updated_at = NOW() where id = $2
returning id, category_name, created_at, updated_at
`

type EditCategoryParams struct {
	CategoryName string
	ID           uuid.UUID
}

func (q *Queries) EditCategory(ctx context.Context, arg EditCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, editCategory, arg.CategoryName, arg.ID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CategoryName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryIdByName = `-- name: GetCategoryIdByName :one
select id from categories where category_name = $1
`

func (q *Queries) GetCategoryIdByName(ctx context.Context, categoryName string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCategoryIdByName, categoryName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getCategoryNameById = `-- name: GetCategoryNameById :one
select category_name from categories where id = $1
`

func (q *Queries) GetCategoryNameById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getCategoryNameById, id)
	var category_name string
	err := row.Scan(&category_name)
	return category_name, err
}
