// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
insert into refresh_token(
    token,
    user_id,
    expires_at,
    created_at,
    updated_at
)
values (
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
select expires_at from refresh_token where user_id = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, userID uuid.UUID) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, userID)
	var expires_at time.Time
	err := row.Scan(&expires_at)
	return expires_at, err
}
