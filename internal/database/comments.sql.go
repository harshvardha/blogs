// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
insert into comments (id, description, blog_id, user_id, created_at, updated_at)
values (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
returning id, description, blog_id, user_id, created_at, updated_at
`

type CreateCommentParams struct {
	Description string
	BlogID      uuid.UUID
	UserID      uuid.UUID
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Description, arg.BlogID, arg.UserID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.BlogID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :one
delete from comments where id = $1
returning id, description, blog_id, user_id, created_at, updated_at
`

func (q *Queries) DeleteComment(ctx context.Context, id uuid.UUID) (Comment, error) {
	row := q.db.QueryRowContext(ctx, deleteComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.BlogID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const editComment = `-- name: EditComment :one
update comments set description = $1, updated_at = NOW() where id = $2 and blog_id = $3
returning id, description, blog_id, user_id, created_at, updated_at
`

type EditCommentParams struct {
	Description string
	ID          uuid.UUID
	BlogID      uuid.UUID
}

func (q *Queries) EditComment(ctx context.Context, arg EditCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, editComment, arg.Description, arg.ID, arg.BlogID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.BlogID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllCommentsByBlogId = `-- name: GetAllCommentsByBlogId :many
select comments.id, 
    comments.description, 
    comments.blog_id, 
    comments.user_id, 
    comments.created_at, 
    comments.updated_at, 
    count(comment_likes.comment_id) as likes_count 
    from comments left join comment_likes on comments.id = comment_likes.comment_id where comments.blog_id = $1
    group by comments.id
`

type GetAllCommentsByBlogIdRow struct {
	ID          uuid.UUID
	Description string
	BlogID      uuid.UUID
	UserID      uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	LikesCount  int64
}

func (q *Queries) GetAllCommentsByBlogId(ctx context.Context, blogID uuid.UUID) ([]GetAllCommentsByBlogIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCommentsByBlogId, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCommentsByBlogIdRow
	for rows.Next() {
		var i GetAllCommentsByBlogIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.BlogID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentById = `-- name: GetCommentById :one
select id, description, blog_id, user_id, created_at, updated_at from comments where id = $1
`

func (q *Queries) GetCommentById(ctx context.Context, id uuid.UUID) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.BlogID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isCommentLiked = `-- name: IsCommentLiked :one
select user_id, comment_id from comment_likes where user_id = $1 and comment_id = $2
`

type IsCommentLikedParams struct {
	UserID    uuid.UUID
	CommentID uuid.UUID
}

type IsCommentLikedRow struct {
	UserID    uuid.UUID
	CommentID uuid.UUID
}

func (q *Queries) IsCommentLiked(ctx context.Context, arg IsCommentLikedParams) (IsCommentLikedRow, error) {
	row := q.db.QueryRowContext(ctx, isCommentLiked, arg.UserID, arg.CommentID)
	var i IsCommentLikedRow
	err := row.Scan(&i.UserID, &i.CommentID)
	return i, err
}

const likeComment = `-- name: LikeComment :exec
insert into comment_likes (user_id, comment_id, created_at, updated_at)
values ($1, $2, NOW(), NOW())
`

type LikeCommentParams struct {
	UserID    uuid.UUID
	CommentID uuid.UUID
}

func (q *Queries) LikeComment(ctx context.Context, arg LikeCommentParams) error {
	_, err := q.db.ExecContext(ctx, likeComment, arg.UserID, arg.CommentID)
	return err
}

const unlikeComment = `-- name: UnlikeComment :exec
delete from comment_likes where user_id = $1 and comment_id = $2
`

type UnlikeCommentParams struct {
	UserID    uuid.UUID
	CommentID uuid.UUID
}

func (q *Queries) UnlikeComment(ctx context.Context, arg UnlikeCommentParams) error {
	_, err := q.db.ExecContext(ctx, unlikeComment, arg.UserID, arg.CommentID)
	return err
}
