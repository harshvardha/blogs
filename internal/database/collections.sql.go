// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: collections.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCollection = `-- name: CreateCollection :one
insert into collections (id, name, user_id, created_at, updated_at)
values (
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW()
)
returning id, name, user_id, created_at, updated_at
`

type CreateCollectionParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, createCollection, arg.Name, arg.UserID)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCollection = `-- name: DeleteCollection :one
delete from collections where id = $1
returning id, name, user_id, created_at, updated_at
`

func (q *Queries) DeleteCollection(ctx context.Context, id uuid.UUID) (Collection, error) {
	row := q.db.QueryRowContext(ctx, deleteCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const editCollection = `-- name: EditCollection :one
update collections set name = $1, updated_at = NOW() where id = $2
returning id, name, user_id, created_at, updated_at
`

type EditCollectionParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) EditCollection(ctx context.Context, arg EditCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, editCollection, arg.Name, arg.ID)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllBlogsByCollectionId = `-- name: GetAllBlogsByCollectionId :many
select blogs.id, blogs.title, blogs.author_id, users.username as author_name, blogs.thumbnail_url, blogs.content, blogs.category, categories.category_name, blogs.created_at, blogs.updated_at from collections join collection_blog on collections.id = collection_blog.collection_id join blogs on collection_blog.blog_id = blogs.id join users on blogs.author_id = users.id join categories on blogs.category = categories.id where collections.id = $1
`

type GetAllBlogsByCollectionIdRow struct {
	ID           uuid.UUID
	Title        string
	AuthorID     uuid.UUID
	AuthorName   string
	ThumbnailUrl string
	Content      string
	Category     uuid.UUID
	CategoryName string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) GetAllBlogsByCollectionId(ctx context.Context, id uuid.UUID) ([]GetAllBlogsByCollectionIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlogsByCollectionId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBlogsByCollectionIdRow
	for rows.Next() {
		var i GetAllBlogsByCollectionIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.AuthorName,
			&i.ThumbnailUrl,
			&i.Content,
			&i.Category,
			&i.CategoryName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCollectionsByUserId = `-- name: GetAllCollectionsByUserId :many
select id, name, user_id, created_at, updated_at from collections where user_id = $1
`

func (q *Queries) GetAllCollectionsByUserId(ctx context.Context, userID uuid.UUID) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, getAllCollectionsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionNameById = `-- name: GetCollectionNameById :one
select name from collections where id = $1
`

func (q *Queries) GetCollectionNameById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getCollectionNameById, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getOwnerId = `-- name: GetOwnerId :one
select user_id from collections where id = $1
`

func (q *Queries) GetOwnerId(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getOwnerId, id)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
